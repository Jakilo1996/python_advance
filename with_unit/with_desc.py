# -*- coding:utf8 -*- #
# -----------------------------------------------------------------------------------
# ProjectName:   code
# FileName:     with_desc.py
# Author:      Jakiro
# Datetime:    2022/5/7 11:52
# Description:
# 命名规则  文件名小写字母+下划线，类名大驼峰，方法、变量名小写字母+下划线连接
# 常量大写，变量和常量用名词、方法用动词
# -----------------------------------------------------------------------------------


# 不使用with的代码 怎么写
# 操作文件

# f = open('file.txt')
# for line in f:
#     print(line)
# # 关闭文件
# f.close()


# 这个例子非常简单，就是打开一个文件，然后读取文件中的内容，最后关闭文件释放资源。
#
# 但是，代码这么写会有一个问题：在打开文件后，如果要对读取到的内容进行其他操作，如果操作期间发生了异常，这就会导致文件句柄无法被释放，进而导致资源的泄露。
#
# 如何解决这个问题？
#
# 也很简单，我们使用 try ... finally 来优化代码：
# try 完成
f = open('file.txt')
try:
    for line in f:
        print(line)
        1/0
# 关闭文件
finally:
    # 保证关闭了文件
    f.close()
    print('close')

# 这么写的好处是，在读取文件内容和操作期间，无论是否发生异常，都可以保证最后能释放文件资源。
#
# 但这么优化，代码结构会变得很繁琐，每次都要给代码逻辑增加 try ... finally 才可以，可读性变得很差。
#
# 针对这种情况，我们就可以使用 with 语法块来解决这个问题：
with open('file.txt') as f:
    for line in f:
        print(line)
# 使用 with 语法块可以完成之前相同的功能，而且这么写的好处是，代码结构变得非常清晰，可读性也很好。

# 自定义类完成
# __enter__：在进入 with 语法块之前调用，返回值会赋值给 with 的 target
# __exit__：在退出 with 语法块时调用，一般用作异常处理